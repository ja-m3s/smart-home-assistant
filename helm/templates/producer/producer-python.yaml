{{- if .Values.producer.enabled }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: producer-python-config
data:
  producer.py: |
    from confluent_kafka import Producer
    import json
    import time
    import random
    import sys
    import os

    # Kafka broker configuration
    bootstrap_servers = os.getenv('BOOTSTRAP_SERVERS')
    topic = os.getenv('TOPIC')

    # Function to print messages
    def print_message(message):
        print(message)
        sys.stdout.flush()  # Ensure the message is immediately flushed to stdout

    # Create Kafka producer configuration
    conf = {'bootstrap.servers': bootstrap_servers}

    # Create Kafka producer instance
    producer = Producer(conf)

    # Sample data to publish
    data = {
        "schema": {
            "type": "struct",
            "fields": [
                {"type": "string", "optional": False, "field": "name"},
                {"type": "string", "optional": False, "field": "type"},
                {"type": "string", "optional": False, "field": "current_state"}
            ]
        },
        "payload": {
            "name": "LIGHT",
            "type": "Producer",
            "current_state": "on"
        }
    }

    # Publish messages to Kafka topic indefinitely
    while True:
        try:
            # Convert data to JSON format
            json_data = json.dumps(data)

            # Print the message to be sent
            print_message(json_data)

            # Publish message to Kafka topic
            producer.produce(topic, value=json_data.encode('utf-8'))

            # Sleep for random seconds
            random_sleep_seconds = random.uniform(1, 20)
            time.sleep(random_sleep_seconds)
        except Exception as e:
            print_message("Error: {}".format(e))
            continue
        except KeyboardInterrupt:
            print_message("Stopping message publishing.")
            break  # Exit the loop on KeyboardInterrupt

    # Close the producer
    producer.flush()  # Flush any remaining messages
    producer.close()
{{- end }}
