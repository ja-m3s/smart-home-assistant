# Name: continue_config.yml
# Description: Pipeline for circleci, continuing from config.yml
# Extracts code coverage metrics, builds the image, adds docs to github
# stores the image, stores the metrics as an artifact in circleci
# Author: ja-m3s
version: 2.1
parameters:
  param-build-shared-utils:
    type: boolean
    default: false
  param-build-db-importer:
    type: boolean
    default: false
  param-build-light-bulb:
    type: boolean
    default: false
  param-build-light-bulb-monitor:
    type: boolean
    default: false
  param-build-remote:
    type: boolean
    default: false
jobs:
  build-shared-utils:
    machine:
      image: ubuntu-2204:current
    steps:
      - checkout
      - run:
          name: Extract Code Coverage - shared-utils
          command: |
            docker build -t temp_build_dbi -f "java/sharedUtils/Dockerfile" "java" --target build
            docker create --name temp_container_dbi temp_build_dbi
            docker cp temp_container_dbi:/app/sharedUtils/target/metrics.zip /tmp/
            docker rm temp_container_dbi
      - store_artifacts:
          path: /tmp/metrics.zip
          destination: sharedUtils-metrics.zip
      - run: 
          name: Add metrics to git
          command: |
            git pull
            mv /tmp/metrics.zip docs/sharedUtils-metrics.zip
            git add docs/sharedUtils-metrics.zip
            git commit -m 'added metrics for shared utils'
            git push
  build-db-importer:
    machine:
      image: ubuntu-2204:current
    steps:
      - checkout
      - run:
          name: Extract Code Coverage - db-importer
          command: |
            docker build -t temp_build_dbi -f "java/dbImporter/Dockerfile" "java" --target build
            docker create --name temp_container_dbi temp_build_dbi
            docker cp temp_container_dbi:/app/dbImporter/target/metrics.zip /tmp/
            docker rm temp_container_dbi
      - run: 
          name: Build dbImporter
          command: |
            docker build -t "${DOCKER_REPO_DB_IMPORTER}:latest" -f "java/dbImporter/Dockerfile" "java"
            docker login --username ${DOCKER_USER} --password ${DOCKER_PASSWORD}
            docker push "${DOCKER_REPO_DB_IMPORTER}:latest"
      - store_artifacts:
          path: /tmp/metrics.zip
          destination: dbImporter-metrics.zip
      - run: 
          name: Add metrics to git
          command: |
            git pull
            mv /tmp/metrics.zip docs/dbImporter-metrics.zip
            git add docs/dbImporter-metrics.zip
            git commit -m 'added metrics for dbImporter'
            git push
  build-light-bulb:
    machine:
      image: ubuntu-2204:current
    steps:
      - checkout
      - run:
          name: Extract Code Coverage - light-bulb
          command: |
            docker build -t temp_build_lb -f "java/lightBulb/Dockerfile" "java" --target build
            docker create --name temp_container_lb temp_build_lb
            docker cp temp_container_lb:/app/lightBulb/target/metrics.zip /tmp/
            docker rm temp_container_lb
      - store_artifacts:
          path: /tmp/metrics.zip
          destination: lightBulb-metrics.zip
      - run: 
          name: Build light-bulb
          command: |
            docker build -t "${DOCKER_REPO_LIGHT_BULB}:latest" -f "java/lightBulb/Dockerfile" "java"
            docker login --username ${DOCKER_USER} --password ${DOCKER_PASSWORD}
            docker push "${DOCKER_REPO_LIGHT_BULB}:latest"
      - run: 
          name: Add metrics to git
          command: |
            git pull
            mv /tmp/metrics.zip docs/lightBulb-metrics.zip
            git add docs/lightBulb-metrics.zip
            git commit -m 'added metrics for lightBulb'
            git push
  build-light-bulb-monitor:
    machine:
      image: ubuntu-2204:current
    steps:
      - checkout
      - run:
          name: Extract Code Coverage - light-bulb-monitor
          command: |
            docker build -t temp_build_lbm -f "java/lightBulbMonitor/Dockerfile" "java" --target build
            docker create --name temp_container_lbm temp_build_lbm
            docker cp temp_container_lbm:/app/lightBulbMonitor/target/metrics.zip /tmp/
            docker rm temp_container_lbm
      - store_artifacts:
          path: /tmp/metrics.zip
          destination: lightBulbMonitor-metrics.zip
      - run: 
          name: Build light-bulb-monitor
          command: |
            docker build -t "${DOCKER_REPO_LIGHT_BULB_MONITOR}:latest" -f "java/lightBulbMonitor/Dockerfile" "java"
            docker login --username ${DOCKER_USER} --password ${DOCKER_PASSWORD}
            docker push "${DOCKER_REPO_LIGHT_BULB_MONITOR}:latest"
      - run: 
          name: Add metrics to git
          command: |
            git pull
            mv /tmp/metrics.zip docs/lightBulbMonitor-metrics.zip
            git add docs/lightBulbMonitor-metrics.zip
            git commit -m 'added metrics for lightBulbMonitor'
            git push
  build-remote:
    machine:
      image: ubuntu-2204:current
    steps:
      - checkout
      - run: 
          name: Build remote
          command: |
            docker build -t "${DOCKER_REPO_REMOTE}:latest" -f "java/remote/Dockerfile" "java"
            docker login --username ${DOCKER_USER} --password ${DOCKER_PASSWORD}
            docker push "${DOCKER_REPO_REMOTE}:latest"
workflows:
  workflow-build-shared-utils:
    when: << pipeline.parameters.param-build-shared-utils >>
    jobs:
      - build-shared-utils:
          context:
            - org-context-smart-home
  workflow-build-db-importer:
    when: << pipeline.parameters.param-build-db-importer >>
    jobs:
      - build-db-importer:
          context:
            - org-context-smart-home
  workflow-build-light-bulb:
    when: << pipeline.parameters.param-build-light-bulb >>
    jobs:
      - build-light-bulb:
          context:
            - org-context-smart-home
  workflow-build-light-bulb-monitor:
    when: << pipeline.parameters.param-build-light-bulb-monitor >>
    jobs:
      - build-light-bulb-monitor:
          context:
            - org-context-smart-home
    workflow-build-remote:
    when: << pipeline.parameters.param-build-remote >>
    jobs:
      - build-remote:
          context:
            - org-context-smart-home